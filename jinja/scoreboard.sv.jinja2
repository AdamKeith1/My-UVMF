// --- Include --- //
{% for file in Dependencies.Include -%}
`include "{{ file }}"
{% endfor -%}
{# Blank Line #}
// --- Scoreboard --- //
class {{ DUT.Module }}_scoreboard extends uvm_scoreboard;
  `uvm_component_utils({{ DUT.Module }}_scoreboard)

  // --- Scoreboard Components --- //
  uvm_analysis_imp #({{ DUT.Module }}_sequence_item, {{ DUT.Module }}_scoreboard) scoreboard_port;
  {{ DUT.Module }}_sequence_item transactions[$];

  // --- Constructor --- //
  function new(string name = "{{ DUT.Module }}_scoreboard", uvm_component parent);
    super.new(name, parent);
    `uvm_info("SCB_CLASS", "Inside Constructor", UVM_HIGH)
  endfunction: new

  // --- Build Phase --- //
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("SCB_CLASS", "Build Phase", UVM_HIGH)
   
    // --- Scoreboard Port --- //
    scoreboard_port = new("scoreboard_port", this);
    
  endfunction: build_phase

  // --- Connect Phase --- //
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("SCB_CLASS", "Connect Phase", UVM_HIGH)
   
  endfunction: connect_phase

  // --- Connect Phase --- //
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("SCB_CLASS", "Connect Phase", UVM_HIGH)
   
  endfunction: connect_phase

  // --- Write Transaction --- //
  function void write({{ DUT.Module }}_sequence_item item);
    transactions.push_back(item);
  endfunction: write 

  // --- Run Phase --- //
  task run_phase (uvm_phase phase);
    super.run_phase(phase);
    `uvm_info("SCB_CLASS", "Run Phase", UVM_HIGH)
   
    // --- Transaction Stack --- //
    forever begin
      {{ DUT.Module }}_sequence_item curr_tx;
      wait((transactions.size() != 0));
      curr_tx = transactions.pop_front();
      compare(curr_tx);
    end
    
  endtask: run_phase

  // --- Compare --- //
  task compare({{ DUT.Module }}_sequence_item curr_tx);

  // User fills in 

  endtask : compare

endclass : {{ DUT.Module }}_scoreboard