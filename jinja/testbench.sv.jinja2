`timescale 1ns/1ns

// --- Dependencies --- //
import uvm_pkg::*;
`include "uvm_macros.svh"

// --- Include Files --- //
`include "interface.sv"
`include "sequence_item.sv"
`include "sequence.sv"
`include "sequencer.sv"
`include "driver.sv"
`include "monitor.sv"
`include "agent.sv"
`include "scoreboard.sv"
`include "env.sv"
`include "test.sv"
{% for file in Dependencies.Include -%}
`include "{{ file }}"
{% endfor -%}
{# Blank Line #}
module top;
  
  // --- Sim Clock --- // 
  logic {{ DUT.Ports.Clock }};
  {{ DUT.Module }}_interface {{ DUT.Module }}_intf(.{{ DUT.Ports.Clock }}({{ DUT.Ports.Clock }}));
  parameter CLK_PERIOD = {{ Testbench.Clock }};

  // --- DUT Instance --- //
  {{ DUT.Module }} DUT(
    // User fills in 
    // Will be fixed post 1.0
  );
  
  // --- Interface --- //
  initial begin
    uvm_config_db #(virtual {{ DUT.Module }}_interface)::set(null, "*", "vif", {{ DUT.Module }}_intf);
  end
  
  // --- Start Test --- //
  initial begin
    run_test("{{ DUT.Module }}_test");
  end
  
  // --- Clock Generation --- //
  always begin: CLK_GEN
      {{ DUT.Ports.Clock }} = 1'b1;
      #(0.5 * CLK_PERIOD);
      {{ DUT.Ports.Clock }} = 1'b0;
      #(0.5 * CLK_PERIOD);
  end

  // --- Maximum Sim Duration --- //
  initial begin
    #(1000 * CLK_PERIOD);
    $display("Sorry! Ran out of clock cycles!");
    $finish();
  end
  
  // --- Generate Waveforms --- //
  initial begin
    $dumpfile("sim.vcd");
    $dumpvars();
  end
  
endmodule: top