class {{ DUT.Module }}_monitor extends uvm_monitor;
  `uvm_component_utils({{ DUT.Module }}_monitor)
  
  // --- Monitor Components --- //
  virtual {{ DUT.Module }}_interface vif;
  {{ DUT.Module }}_sequence_item item;
  
  uvm_analysis_port #({{ DUT.Module }}_sequence_item) monitor_port;
  
  // --- Constructor --- //
  function new(string name = "{{ DUT.Module }}_monitor", uvm_component parent);
    super.new(name, parent);
    `uvm_info("MONITOR_CLASS", "Inside Constructor", UVM_HIGH)
  endfunction: new
  
  // --- Build Phase --- //
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info("MONITOR_CLASS", "Build Phase", UVM_HIGH)
    
    // --- Build Monitor Port --- //
    monitor_port = new("monitor_port", this);
    
    // --- Virtual Interface Failure --- //
    if(!(uvm_config_db #(virtual {{ DUT.Module }}_interface)::get(this, "*", "vif", vif))) begin
      `uvm_error("MONITOR_CLASS", "Failed to get virtual interface")
    end
    
  endfunction: build_phase
  
  // --- Connect Phase --- //
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("MONITOR_CLASS", "Connect Phase", UVM_HIGH)
    
  endfunction: connect_phase
  
  // --- Run Phase --- //
  task run_phase (uvm_phase phase);
    super.run_phase(phase);
    `uvm_info("MONITOR_CLASS", "Inside Run Phase!", UVM_HIGH)
    
    // --- Capture DUT Interface --- //
    forever begin
      item = {{ DUT.Module }}_sequence_item::type_id::create("item");
      {%- set ports_in = DUT.Ports.In %}
      {%- set ports_out = DUT.Ports.Out %}

      {%- set max_len_in = ports_in | map('length') | max %}
      {%- set max_len_out = ports_out | map('length') | max %}
      {%- set max_len = [max_len_in, max_len_out] | max %}

      {%- macro pad(variable, length) -%}
          {{- variable -}}{{ ' ' * (length - variable|length) }}
      {%- endmacro %}
      
      wait(vif.{{ DUT.Ports.Active_Low_Reset }});

      // --- Input Sample --- //
      @(posedge vif.{{ DUT.Ports.Clock }});
      {% for port in ports_in -%}
      item.{{ pad(port, max_len) }} = vif.{{ port }};
      {% endfor %}
      // --- Output Sample --- //
      @(posedge vif.{{ DUT.Ports.Clock }});
      {% for port in ports_out -%}
      item.{{ pad(port, max_len) }} = vif.{{ port }};
      {% endfor %}
      // --- Send to Scoreboard --- //
      monitor_port.write(item);
      
    end
        
  endtask: run_phase
  
endclass: {{ DUT.Module }}_monitor